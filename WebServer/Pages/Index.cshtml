@page
@model WebServer.Pages.IndexModel
@{
    ViewBag.Title = "Главная";
    Layout = "_Layout";
    ViewBag.Address = "127.0.0.1:5001";
}

<div id="content-div">
    <div class="tab-div" :style="{display: activeTab != -1 ? 'none' : ''}">
        <b-spinner style="align-self: center"></b-spinner>
    </div>
    <div class="tab-div" :style="{display: activeTab != 0 ? 'none' : ''}">
        <h1>
            Чтобы воспользоваться системой «Аспирант» необходимо
            <span class="clickable-text" @@click="openLoginForm">войти</span>.
        </h1>
    </div>
    <div class="tab-div" :style="{display: activeTab != 1 ? 'none' : ''}">
        <h1>
            Недостаточно прав доступа<br />
            Воспользуйтесь учётной записью с достаточными правами доступа
        </h1>
    </div>
    <div class="tab-div" :style="{display: activeTab != 2 ? 'none' : ''}">
        <h1>Зарегистрированные физ. лица</h1>
        <b-table :items="persons"
                 :fields="personFields"
                 select-mode="single"
                 responsive="sm"
                 ref="selectableTable"
                 selectable
                 primary-key="id"
                 @@row-selected="onPersonRowSelected">
            <template #cell(selectedPerson)="{ rowSelected }">
                <template v-if="rowSelected">
                    <span aria-hidden="true">&check;</span>
                </template>
                <template v-else>
                    <span aria-hidden="true">&nbsp;</span>
                </template>
            </template>
        </b-table>
    </div>
    <div class="tab-div" :style="{display: activeTab != 3 ? 'none' : ''}">
        <h1>Данные об абитуриенте</h1>
        <div v-if="abiturient !== null" style="display: flex; flex-wrap: wrap;">
            <div v-for="a in abiturient.specialties.map(i => i)" class="abitur-spec">
                <p>Факультет: {{getSpecialty(a).faculty}}</p>
                <p>Кафедра: {{getSpecialty(a).cathedra}}</p>
                <p>Специальность: {{getSpecialty(a).specialty}}</p>
            </div>
        </div>
    </div>
    <div class="tab-div" :style="{display: activeTab != 4 ? 'none' : ''}">
        <h1>Вступительные экзамены</h1>
    </div>
    <div class="tab-div" :style="{display: activeTab != 5 ? 'none' : ''}">
        <h1>Данные аспиранта</h1>
    </div>
    <div class="tab-div" :style="{display: activeTab != 6 ? 'none' : ''}">
        <h1>Зачёты/экзаменыа</h1>
    </div>
    <div class="tab-div" :style="{display: activeTab != 7 ? 'none' : ''}">
        <h1>Список преподавателей</h1>
        <b-table :items="teachers"
                 :fields="teacherFields"
                 select-mode="single"
                 responsive="sm"
                 ref="selectableTable"
                 selectable
                 primary-key="id"
                 @@row-selected="onTeacherRowSelected">
            <template #cell(selectedTeacher)="{ rowSelected }">
                <template v-if="rowSelected">
                    <span aria-hidden="true">&check;</span>
                </template>
                <template v-else>
                    <span aria-hidden="true">&nbsp;</span>
                </template>
            </template>
        </b-table>
    </div>
</div>
<script>
    window.bodyApp = new Vue({
        el: '#content-div',
        data: {
            activeTab: -1,

            faculties: [],
            cathedras: [],
            specialties: [],

            personFields: [
                {
                    key: 'lastname',
                    sortable: true,
                    label: 'Фамилия'
                },
                {
                    key: 'firstname',
                    sortable: true,
                    label: 'Имя'
                },
                {
                    key: 'patronymic',
                    sortable: true,
                    label: 'Отчество'
                },
                {
                    key: 'birth',
                    sortable: true,
                    label: 'Дата рождения'
                },
                {
                    key: 'citizenship',
                    sortable: true,
                    label: 'Гражданство'
                },
                {
                    key: 'passport',
                    sortable: true,
                    label: 'Документ'
                },
                {
                    key: 'book',
                    sortable: true,
                    label: 'Трудовая книжка'
                },
                {
                    key: 'wokplaces',
                    sortable: true,
                    label: 'Место работы'
                },
                {
                    key: 'contacts',
                    sortable: true,
                    label: 'Контактные данные'
                }],
            persons: [],

            teacherFields: [
                {
                    key: 'lastname',
                    sortable: true,
                    label: 'Фамилия'
                },
                {
                    key: 'firstname',
                    sortable: true,
                    label: 'Имя'
                },
                {
                    key: 'patronymic',
                    sortable: true,
                    label: 'Отчество'
                },
                {
                    key: 'birth',
                    sortable: true,
                    label: 'Дата рождения'
                },
                {
                    key: 'cathedra',
                    sortable: true,
                    label: 'Кафедра'
                },
                {
                    key: 'rank',
                    sortable: true,
                    label: 'Учёное звание'
                },
                {
                    key: 'position',
                    sortable: true,
                    label: 'Должность'
                }],
            teachers: [],

            person: [],
            teacher: [],
            abiturient: null
        },
        methods: {
            openLoginForm() {
                window.topApp.loginForm = true;
            },
            onPersonRowSelected(items) {
                this.selectedPerson = items;
                if (this.selectedPerson.length > 0) {
                    window.topApp.personSelected = true;
                    fetch(`https://@ViewBag.Address/api/abiturient/list`, { credentials: "include" })
                        .then(res => {
                            if (res.status == 200) {
                                res.json().then(r =>
                                    this.abiturient = r.find(i => i.personId == this.selectedPerson[0].id))
                            }
                        })
                }
                else {
                    window.topApp.personSelected = false;
                    this.abiturient = null;
                }
            },
            onTeacherRowSelected(items) {
                this.selectedTeacher = items;
            },
            load() {
                fetch(`https://@ViewBag.Address/api/person/list`, { credentials: "include" })
                    .then(res => {
                        if (res.status == 200)
                            res.json().then(r => {
                                window.bodyApp.persons = r.map(i => {
                                    i.book = i.workbook ? 'В наличии' : 'Отсутствует';
                                    i.birth = `${new Date(Date.parse(i.birthdate)).getDate().toString().length == 1 ? '0' :
                                        ''}${new Date(Date.parse(i.birthdate)).getDate()}.` +
                                        `${(new Date(Date.parse(i.birthdate)).getMonth() + 1).toString().length == 1 ? '0' :
                                            ''}${new Date(Date.parse(i.birthdate)).getMonth() + 1}.` +
                                        `${new Date(Date.parse(i.birthdate)).getFullYear()}`;
                                    return i;
                                });
                            });
                    });
                fetch(`https://@ViewBag.Address/api/faculty/list`, { credentials: "include" })
                    .then(res => {
                        if (res.status == 200)
                            res.json().then(r => this.faculties = r);
                    });
                fetch(`https://@ViewBag.Address/api/cathedra/list`, { credentials: "include" })
                    .then(res => {
                        if (res.status == 200)
                            res.json().then(r => this.cathedras = r);
                    });
                fetch(`https://@ViewBag.Address/api/specialty/list`, { credentials: "include" })
                    .then(res => {
                        if (res.status == 200)
                            res.json().then(r => this.specialties = r);
                    });
                fetch(`https://@ViewBag.Address/api/teacher/list`, { credentials: "include" })
                    .then(res => {
                        if (res.status == 200)
                            res.json().then(r => {
                                window.bodyApp.teachers = r.map(i => {
                                    i.cathedra = this.cathedras.find(c => c.id == i.cathedraId).title;
                                    i.birth = `${new Date(Date.parse(i.birthDate)).getDate().toString().length == 1 ? '0' :
                                        ''}${new Date(Date.parse(i.birthDate)).getDate()}.` +
                                        `${(new Date(Date.parse(i.birthDate)).getMonth() + 1).toString().length == 1 ? '0' :
                                            ''}${new Date(Date.parse(i.birthDate)).getMonth() + 1}.` +
                                        `${new Date(Date.parse(i.birthDate)).getFullYear()}`;
                                    return i;
                                });
                            });
                    });
            },
            getSpecialty(id) {
                let s = this.specialties.find(i => i.id == id);
                let c = this.cathedras.find(i => s.cathedraId == i.id);
                let f = this.faculties.find(i => i.id == c.facultyId);
                return {
                    specialty: s.title,
                    cathedra: c.title,
                    faculty: f.title
                }
            }
        },
        computed: {

        }
    });
</script>